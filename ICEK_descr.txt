Konzolos
1. Visual 2022
	create new project->consol app (.net core) vagy (.net 6/7)
2. Solution Explorer-> jobb Klikk ‚Üí Add ‚Üí Class-> Berles.cs

using System;

public class Berles
{
    public int Uid { get; set; }
    public int OfficeId { get; set; }
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }
    public decimal DailyRate { get; set; }
    public string Name { get; set; }
    public string Location { get; set; }

    public int DurationInDays => (EndDate - StartDate).Days + 1;

    public decimal TotalPrice => DurationInDays * DailyRate;
}
3. Program.cs-be
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;

class Program
{
    static List<Berles> berlesek = new List<Berles>();

    static void Main(string[] args)
    {
        string filePath = "office_rentals_2024.csv";

        if (!File.Exists(filePath))
        {
            Console.WriteLine("Nem tal√°lhat√≥ a f√°jl: " + filePath);
            return;
        }

        using (var reader = new StreamReader(filePath))
        {
            bool isFirstLine = true;
            while (!reader.EndOfStream)
            {
                string line = reader.ReadLine();
                if (isFirstLine)
                {
                    isFirstLine = false;
                    continue;
                }

                string[] parts = line.Split(',');

                Berles b = new Berles
                {
                    Uid = int.Parse(parts[0]),
                    OfficeId = int.Parse(parts[1]),
                    StartDate = DateTime.ParseExact(parts[2], "yyyy-MM-dd", CultureInfo.InvariantCulture),
                    EndDate = DateTime.ParseExact(parts[3], "yyyy-MM-dd", CultureInfo.InvariantCulture),
                    DailyRate = decimal.Parse(parts[4], CultureInfo.InvariantCulture),
                    Name = parts[5],
                    Location = parts[6]
                };

                berlesek.Add(b);
            }
        }

        Console.WriteLine("Adatok beolvasva. √ñsszes b√©rl√©s: " + berlesek.Count);
    }
}

4. F√°jl bem√°sol√°sa - office_rentals_2024.csv - a bin\Debug\net6.0

5. Feladat le√≠r√°sa:
K√©rj√ºnk be egy h√≥napot (1‚Äì12).
Sz√°moljuk ki, mennyi √∂sszbev√©tel keletkezett az adott h√≥napban.
Egy b√©rl√©s akkor sz√°m√≠t bele, ha ak√°r r√©szben is beleesik az adott h√≥napba.
->Logika r√∂viden:
K√©rj√ºk be a h√≥napot.

Sz√°m√≠tsuk ki a h√≥nap els≈ë √©s utols√≥ napj√°t.
N√©zz√ºk v√©gig az √∂sszes Berles-t.
Ha a b√©rl√©s √°tfed az adott h√≥nappal:
Hat√°rozzuk meg, h√°ny nap esik a h√≥napra.
Szorozzuk meg a napi d√≠jjal.
√ñsszegezz√ºk ezeket.

Main()met√≥dus v√©g√©re
________________________________________________________________

Console.Write("\nAdd meg a h√≥nap sz√°m√°t (1-12): ");
if (int.TryParse(Console.ReadLine(), out int honap) && honap >= 1 && honap <= 12)
{
    DateTime honapEleje = new DateTime(2024, honap, 1);
    DateTime honapVege = honapEleje.AddMonths(1).AddDays(-1);

    decimal osszBevetel = 0;

    foreach (var b in berlesek)
    {
        // B√©rl√©s √©s h√≥nap √°tfed√©s√©nek meghat√°roz√°sa
        DateTime kezdet = b.StartDate > honapEleje ? b.StartDate : honapEleje;
        DateTime vege = b.EndDate < honapVege ? b.EndDate : honapVege;

        if (kezdet <= vege) // van √°tfed√©s
        {
            int napok = (vege - kezdet).Days + 1;
            osszBevetel += napok * b.DailyRate;
        }
    }

    Console.WriteLine($"A {honap}. h√≥nap bev√©tele: {osszBevetel:0.00} eur√≥");
}
else
{
    Console.WriteLine("√ârv√©nytelen h√≥nap!");
}
___________________________________________________________________________
6.Teljes √©ves bev√©tel meghat√°roz√°sa
‚Ä¢ Sz√°m√≠tsa ki, hogy az irodab√©rl√©sekb≈ël mennyi bev√©tel keletkezett 2024-ben.
decimal evesBevetel = 0;
__________________________________
foreach (var b in berlesek)
{
    evesBevetel += b.TotalPrice; // a TotalPrice kisz√°molja a napok sz√°m√°t * napi d√≠j
}

Console.WriteLine($"\nTeljes √©ves bev√©tel (2024): {evesBevetel:0.00} eur√≥");
__________________________________
7. 4. Feladat ‚Äì A legdr√°g√°bb b√©rl√©s megkeres√©se:Feladat le√≠r√°sa:
Keress√ºk meg azt a b√©rl√©st, amelynek a legnagyobb a teljes √°ra (TotalPrice).

√çrjuk ki r√≥la az al√°bbi adatokat:

B√©rl≈ë azonos√≠t√≥ (Uid)
Iroda neve
B√©rl√©s id≈ëtartama (StartDate ‚Äì EndDate)
Teljes √°r (TotalPrice)

var legdragabb = berlesek.MaxBy(b => b.TotalPrice);

if (legdragabb != null)
{
    Console.WriteLine("\nLegdr√°g√°bb b√©rl√©s:");
    Console.WriteLine($"B√©rl≈ë ID: {legdragabb.Uid}");
    Console.WriteLine($"Iroda neve: {legdragabb.Name}");
    Console.WriteLine($"Id≈ëtartam: {legdragabb.StartDate:yyyy-MM-dd} - {legdragabb.EndDate:yyyy-MM-dd}");
    Console.WriteLine($"Teljes √°r: {legdragabb.TotalPrice:0.00} eur√≥");
}
Megjegyz√©s: a MaxBy() met√≥dus a System.Linq n√©vt√©rben tal√°lhat√≥ ‚Äì gy≈ëz≈ëdj meg r√≥la, hogy van a f√°jl tetej√©n.
_______________________________________
8. 5. Feladat ‚Äì B√©relhet≈ë irod√°k sz√°ma (k√ºl√∂nb√∂z≈ë officeid alapj√°n)
Feladat le√≠r√°sa:
Meg kell sz√°molni, h√°ny k√ºl√∂nb√∂z≈ë irod√°t b√©reltek ki az √©v sor√°n.
Az egyedis√©g alapja az officeid mez≈ë.

Ez a k√≥d:
lek√©ri az √∂sszes officeid-t,
kisz≈±ri a duplik√°tumokat (Distinct()),
√∂sszesz√°molja, h√°ny maradt.
int kulonbozoIrodakSzama = berlesek
    .Select(b => b.OfficeId)
    .Distinct()
    .Count();

Console.WriteLine($"\nK√ºl√∂nb√∂z≈ë irod√°k sz√°ma: {kulonbozoIrodakSzama}");
____________________________
9.Feladat le√≠r√°sa:
Hat√°rozzuk meg, melyik irod√°t b√©relt√©k ki a legt√∂bbsz√∂r.

Az irod√°kat a name mez≈ë alapj√°n csoportos√≠tjuk.
Megjelen√≠tj√ºk a legt√∂bbet b√©relt iroda nev√©t √©s a b√©rl√©sek sz√°m√°t.

Ez a k√≥d:
csoportos√≠t Name szerint,
rendezi cs√∂kken≈ë sorrendbe a csoport m√©rete alapj√°n,
lek√©ri az els≈ët.
var legtobbszorBerelt = berlesek
    .GroupBy(b => b.Name)
    .OrderByDescending(g => g.Count())
    .FirstOrDefault();

if (legtobbszorBerelt != null)
{
    Console.WriteLine("\nLeggyakrabban b√©relt iroda:");
    Console.WriteLine($"N√©v: {legtobbszorBerelt.Key}");
    Console.WriteLine($"B√©rl√©sek sz√°ma: {legtobbszorBerelt.Count()}");
}
___________________________________________
10.  7. Feladat ‚Äì B√©rl√©sek sz√°ma helysz√≠nenk√©nt (location alapj√°n)
Feladat le√≠r√°sa:
Csoportos√≠tsuk a b√©rl√©seket a Location mez≈ë alapj√°n.

Console.WriteLine("\nB√©rl√©sek sz√°ma helysz√≠nenk√©nt:");

var helyszinek = berlesek
    .GroupBy(b => b.Location)
    .OrderByDescending(g => g.Count());

foreach (var helyszin in helyszinek)
{
    Console.WriteLine($"{helyszin.Key}: {helyszin.Count()} b√©rl√©s");
}
√çrjuk ki, hogy egy-egy helysz√≠nen h√°ny b√©rl√©s t√∂rt√©nt.

___________________________________________
11.8. Feladat ‚Äì √Åtlagos b√©rl√©si id≈ëtartam (napban)
üéØ Feladat le√≠r√°sa:
Sz√°moljuk ki, hogy √°tlagosan h√°ny napig tartottak az irodab√©rl√©sek 2024-ben.
Fontos: az +1 az√©rt kell, hogy pl. 2024-04-01 ‚Äì 2024-04-01 is 1 nap legyen, ne 0.

double atlagosNapok = berlesek
    .Select(b => (b.EndDate - b.StartDate).TotalDays + 1) // +1 hogy a kezd≈ënap is sz√°m√≠tson
    .Average();

Console.WriteLine($"\n√Åtlagos b√©rl√©si id≈ëtartam: {atlagosNapok:F2} nap");
__________________________________________________________________________
EGYBEN
Berles.cs
ng System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OfficeSphereConsoleApp
{
    public class Berles
    {
        public int Uid { get; set; }
        public int OfficeId { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public decimal DailyRate { get; set; }
        public string Name { get; set; }
        public string Location { get; set; }
        public int DurationInDays => (EndDate - StartDate).Days + 1;
        public decimal TotalPrice => DurationInDays * DailyRate;
    
    }
}
______________________________________
Program.cs
using OfficeSphereConsoleApp;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;

class Program
{
    static List<Berles> berlesek = new List<Berles>();

    static void Main(string[] args)
    {
        string filePath = "office_rentals_2024.csv";

        if (!File.Exists(filePath))
        {
            Console.WriteLine("Nem tal√°lhat√≥ a f√°jl: " + filePath);
            return;
        }

        using (var reader = new StreamReader(filePath))
        {
            bool isFirstLine = true;
            while (!reader.EndOfStream)
            {
                string line = reader.ReadLine();
                if (isFirstLine)
                {
                    isFirstLine = false;
                    continue;
                }

                string[] parts = line.Split(',');

                Berles b = new Berles
                {
                    Uid = int.Parse(parts[0]),
                    OfficeId = int.Parse(parts[1]),
                    StartDate = DateTime.ParseExact(parts[2], "yyyy-MM-dd", CultureInfo.InvariantCulture),
                    EndDate = DateTime.ParseExact(parts[3], "yyyy-MM-dd", CultureInfo.InvariantCulture),
                    DailyRate = decimal.Parse(parts[4], CultureInfo.InvariantCulture),
                    Name = parts[5],
                    Location = parts[6]
                };

                berlesek.Add(b);
            }
        }
        //Feladat 2.

        Console.WriteLine("Adatok beolvasva. √ñsszes b√©rl√©s: " + berlesek.Count);

        Console.Write("\nAdd meg a h√≥nap sz√°m√°t (1-12): ");
        if (int.TryParse(Console.ReadLine(), out int honap) && honap >= 1 && honap <= 12)
        {
            DateTime honapEleje = new DateTime(2024, honap, 1);
            DateTime honapVege = honapEleje.AddMonths(1).AddDays(-1);

            decimal osszBevetel = 0;

            foreach (var b in berlesek)
            {
                // B√©rl√©s √©s h√≥nap √°tfed√©s√©nek meghat√°roz√°sa
                DateTime kezdet = b.StartDate > honapEleje ? b.StartDate : honapEleje;
                DateTime vege = b.EndDate < honapVege ? b.EndDate : honapVege;

                if (kezdet <= vege) // van √°tfed√©s
                {
                    int napok = (vege - kezdet).Days + 1;
                    osszBevetel += napok * b.DailyRate;
                }
            }

            Console.WriteLine($"A {honap}. h√≥nap bev√©tele: {osszBevetel:0.00} eur√≥");
        }
        else
        {
            Console.WriteLine("√ârv√©nytelen h√≥nap!");
        }
        // Feladat 3.
        decimal evesBevetel = 0;

        foreach (var b in berlesek)
        {
            evesBevetel += b.TotalPrice; // a TotalPrice kisz√°molja a napok sz√°m√°t * napi d√≠j
        }

        Console.WriteLine($"\nTeljes √©ves bev√©tel (2024): {evesBevetel:0.00} eur√≥");

        //Feladat 4.
        var legdragabb = berlesek.MaxBy(b => b.TotalPrice);

        if (legdragabb != null)
        {
            Console.WriteLine("\nLegdr√°g√°bb b√©rl√©s:");
            Console.WriteLine($"B√©rl≈ë ID: {legdragabb.Uid}");
            Console.WriteLine($"Iroda neve: {legdragabb.Name}");
            Console.WriteLine($"Id≈ëtartam: {legdragabb.StartDate:yyyy-MM-dd} - {legdragabb.EndDate:yyyy-MM-dd}");
            Console.WriteLine($"Teljes √°r: {legdragabb.TotalPrice:0.00} eur√≥");
        }
        int kulonbozoIrodakSzama = berlesek
            .Select(b => b.OfficeId)
            .Distinct()
            .Count();

        Console.WriteLine($"\nK√ºl√∂nb√∂z≈ë irod√°k sz√°ma: {kulonbozoIrodakSzama}");
        var legtobbszorBerelt = berlesek
            .GroupBy(b => b.Name)
            .OrderByDescending(g => g.Count())
            .FirstOrDefault();

        if (legtobbszorBerelt != null)
        {
            Console.WriteLine("\nLeggyakrabban b√©relt iroda:");
            Console.WriteLine($"N√©v: {legtobbszorBerelt.Key}");
            Console.WriteLine($"B√©rl√©sek sz√°ma: {legtobbszorBerelt.Count()}");
        }
        Console.WriteLine("\nB√©rl√©sek sz√°ma helysz√≠nenk√©nt:");
        //7.feladat
        var helyszinek = berlesek
            .GroupBy(b => b.Location)
            .OrderByDescending(g => g.Count());

        foreach (var helyszin in helyszinek)
        {
            Console.WriteLine($"{helyszin.Key}: {helyszin.Count()} b√©rl√©s");
        }
        //8.feladat

        double atlagosNapok = berlesek
    .Select(b => (b.EndDate - b.StartDate).TotalDays + 1) // +1 hogy a kezd≈ënap is sz√°m√≠tson
    .Average();

        Console.WriteLine($"\n√Åtlagos b√©rl√©si id≈ëtartam: {atlagosNapok:F2} nap");

    }


}

